{"ast":null,"code":"import _objectSpread from\"C:/Users/Iqbal Alfajar/Documents/DTS/IqbalAlfajar_ToDoList/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/Iqbal Alfajar/Documents/DTS/IqbalAlfajar_ToDoList/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"C:/Users/Iqbal Alfajar/Documents/DTS/IqbalAlfajar_ToDoList/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import AddTaskForm from'./components/AddTaskForm.jsx';import UpdateForm from'./components/UpdateForm.jsx';import ToDo from'./components/ToDo.jsx';import'bootstrap/dist/css/bootstrap.min.css';import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// Tasks (ToDo List) State\n//////////////////////////\nvar _useState=useState([{id:1,title:'Task 1',status:false},{id:2,title:'Task 2',status:false}]),_useState2=_slicedToArray(_useState,2),toDo=_useState2[0],setToDo=_useState2[1];// Temp State\n/////////////\nvar _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),newTask=_useState4[0],setNewTask=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),updateData=_useState6[0],setUpdateData=_useState6[1];// Add task \n///////////\nvar addTask=function addTask(){if(newTask){var num=toDo.length+1;// let newEntry = { id: num, title: newTask, status: false }\n// setToDo([...toDo, newEntry])\n// refactored\nsetToDo([].concat(_toConsumableArray(toDo),[{id:num,title:newTask,status:false}]));setNewTask('');}};// Delete task \n//////////////\nvar deleteTask=function deleteTask(id){// let newTasks = toDo.filter( task => task.id !== id)\n// setToDo(newTasks)\n// refactored\nsetToDo(toDo.filter(function(task){return task.id!==id;}));};// Mark task as done or completed\n/////////////////////////////////\nvar markDone=function markDone(id){// let newTask = toDo.map( task => {\n//   if( task.id === id ) {\n//     return ({ ...task, status: !task.status })\n//   } \n//   return task\n// })\n// setToDo(newTask)\n// refactored\nsetToDo(toDo.map(function(task){return task.id===id?_objectSpread(_objectSpread({},task),{},{status:!task.status}):task;}));};// Cancel update\n////////////////\nvar cancelUpdate=function cancelUpdate(){setUpdateData('');};// Change task for update\n/////////////////////////\nvar changeHolder=function changeHolder(e){// let newEntry = {\n//   id: updateData.id,\n//   title: e.target.value,\n//   status: updateData.status ? true : false\n// }\n// setUpdateData(newEntry)\n// refactored\nsetUpdateData(_objectSpread(_objectSpread({},updateData),{},{title:e.target.value}));};// Update task\n//////////////\nvar updateTask=function updateTask(){// let filterRecords = [...toDo].filter( task => task.id !== updateData.id )\n// let updatedObject = [...filterRecords, updateData]\n// setToDo(updatedObject)\n// refactored\nvar removeOldRecord=_toConsumableArray(toDo).filter(function(task){return task.id!==updateData.id;});setToDo([].concat(_toConsumableArray(removeOldRecord),[updateData]));setUpdateData('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"container App\",children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"h2\",{children:\"To Do List App (ReactJS)\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"Iqbal Alfajar_Kelas D_DTS FGA\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),updateData&&updateData?/*#__PURE__*/_jsx(UpdateForm,{updateData:updateData,changeHolder:changeHolder,updateTask:updateTask,cancelUpdate:cancelUpdate}):/*#__PURE__*/_jsx(AddTaskForm,{newTask:newTask,setNewTask:setNewTask,addTask:addTask}),toDo&&toDo.length?'':'No Tasks...',/*#__PURE__*/_jsx(ToDo,{toDo:toDo,markDone:markDone,setUpdateData:setUpdateData,deleteTask:deleteTask})]});}export default App;","map":{"version":3,"sources":["C:/Users/Iqbal Alfajar/Documents/DTS/IqbalAlfajar_ToDoList/src/App.js"],"names":["useState","AddTaskForm","UpdateForm","ToDo","App","id","title","status","toDo","setToDo","newTask","setNewTask","updateData","setUpdateData","addTask","num","length","deleteTask","filter","task","markDone","map","cancelUpdate","changeHolder","e","target","value","updateTask","removeOldRecord"],"mappings":"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","sourcesContent":["import {useState} from 'react'\nimport AddTaskForm from './components/AddTaskForm.jsx'\nimport UpdateForm from './components/UpdateForm.jsx'\nimport ToDo from './components/ToDo.jsx'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport './App.css'\n\nfunction App() {\n\n  // Tasks (ToDo List) State\n  //////////////////////////\n  const [toDo, setToDo] = useState([\n    {id: 1, title: 'Task 1', status: false},\n    {id: 2, title: 'Task 2', status: false}\n  ])\n\n  // Temp State\n  /////////////\n  const [newTask, setNewTask] = useState('')\n  const [updateData, setUpdateData] = useState('')\n\n  // Add task \n  ///////////\n  const addTask = () => {\n    if(newTask) {\n      let num = toDo.length + 1 \n      \n      // let newEntry = { id: num, title: newTask, status: false }\n      // setToDo([...toDo, newEntry])\n\n      // refactored\n      setToDo([\n        ...toDo, \n        { id: num, title: newTask, status: false }\n      ])\n\n      setNewTask('')\n\n    }\n  }\n\n  // Delete task \n  //////////////\n  const deleteTask = (id) => {\n    \n    // let newTasks = toDo.filter( task => task.id !== id)\n    // setToDo(newTasks)\n\n    // refactored\n    setToDo(toDo.filter(task => task.id !== id))\n\n  }\n\n  // Mark task as done or completed\n  /////////////////////////////////\n  const markDone = (id) => {\n    \n    // let newTask = toDo.map( task => {\n    //   if( task.id === id ) {\n    //     return ({ ...task, status: !task.status })\n    //   } \n    //   return task\n    // })\n    // setToDo(newTask)\n\n    // refactored\n    setToDo(toDo.map(\n      task => task.id === id \n      ? ({ ...task, status: !task.status }) \n      : (task) \n    ))\n\n  }\n\n  // Cancel update\n  ////////////////\n  const cancelUpdate = () => {\n    setUpdateData('')\n  }\n\n  // Change task for update\n  /////////////////////////\n  const changeHolder = (e) => {\n\n    // let newEntry = {\n    //   id: updateData.id,\n    //   title: e.target.value,\n    //   status: updateData.status ? true : false\n    // }\n    // setUpdateData(newEntry)\n\n    // refactored\n    setUpdateData({...updateData, title: e.target.value})\n\n  }\n\n  // Update task\n  //////////////\n  const updateTask = () => {\n    \n    // let filterRecords = [...toDo].filter( task => task.id !== updateData.id )\n    // let updatedObject = [...filterRecords, updateData]\n    // setToDo(updatedObject)\n\n    // refactored\n    let removeOldRecord = [...toDo].filter(task => task.id !== updateData.id)\n    setToDo([\n      ...removeOldRecord, \n      updateData\n    ])\n    \n    setUpdateData('')\n\n  }\n\n  return (\n    <div className=\"container App\">\n\n    <br /><br />\n    <h2>To Do List App (ReactJS)</h2>\n    <h5>Iqbal Alfajar_Kelas D_DTS FGA</h5>\n    <br /><br />\n\n    {updateData && updateData ? (\n      <UpdateForm \n        updateData={updateData}\n        changeHolder={changeHolder}\n        updateTask={updateTask}\n        cancelUpdate={cancelUpdate}\n      />\n    ) : (\n      <AddTaskForm \n        newTask={newTask}\n        setNewTask={setNewTask}\n        addTask={addTask}\n      />\n    )}\n\n    {toDo && toDo.length ? '' : 'No Tasks...'}\n\n    <ToDo\n      toDo={toDo}\n      markDone={markDone}\n      setUpdateData={setUpdateData}\n      deleteTask={deleteTask}\n    />  \n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}